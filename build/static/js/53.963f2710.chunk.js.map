{"version":3,"file":"static/js/53.963f2710.chunk.js","mappings":"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","sources":["api/others.js","webpack://hts-frontend/./src/components/demo-tests/DemoTests.module.css?b698","components/demo-tests/AttempTest.jsx","components/demo-tests/index.jsx"],"sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n});\n\n/**\n * \n * @param {Boolean} isImportant Fetch only important announcements if true\n */\nexport function getAnnouncements(isImportant) {\n  return instance.get(`/announcements${isImportant ? '?isImportant=true' : ''}`);\n}\n\nexport function getDemoTests(values) {\n  /* Due to refetch of react query we get\n    values = {\n      queryKey: ['demo-tests', { subject: <value> }]\n    }\n  */\n  return instance.get(`/demo-tests?${queryString.stringify(values.queryKey[1])}`);\n}\n\nexport function getDemoTest(_id) {\n  return instance.get(`/demo-tests/${_id}`);\n}\n\nexport default instance;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"DemoTests_filter__UYZpB\",\"cards-container\":\"DemoTests_cards-container__pryCJ\",\"record\":\"DemoTests_record__QCKIk\",\"record-item-name\":\"DemoTests_record-item-name__rltA3\",\"record-item-value\":\"DemoTests_record-item-value__VWuaJ\"};","/* eslint-disable no-restricted-globals */\n/* eslint-disable no-underscore-dangle */\nimport React from 'react';\n\nimport {\n  Typography,\n  CircularProgress,\n  Container,\n} from '@mui/material';\n\nimport {\n  useParams,\n  useNavigate,\n} from 'react-router-dom';\n\nimport { useDispatch } from 'react-redux';\n\nimport { useQuery } from 'react-query';\nimport { getDemoTest } from '../../api/others';\n\nimport { addErrorToast } from '../../redux/actions/toasts';\n\nimport Question from '../student/AttemptTest/Question';\nimport TestResult from '../student/AttemptTest/TestResult';\n\nimport styles from './DemoTests.module.css';\n\nfunction AttempTest() {\n  const { _id } = useParams();\n  const [test, setTest] = React.useState({});\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { isLoading } = useQuery(['demo-test', _id], () => getDemoTest(_id), {\n    onSuccess: ({ data }) => setTest(data.demoTest),\n    onError: (err) => {\n      dispatch(addErrorToast({ message: err.response?.data?.error || err.message }));\n      // Go back\n      navigate(-1);\n    },\n  });\n  const [index, setIndex] = React.useState(0);\n  const [answers, setAnswers] = React.useState([]);\n  React.useEffect(() => function () {\n    /* if (confirm('Are you sure you want to leave?')) {\n      // navigate('');\n    } else {\n      navigate('');\n    } */\n    return () => confirm('Are you sure you want to leave?') && navigate('');\n  }, []);\n  if (isLoading) return <div className=\"page-pre-loader\"><CircularProgress /></div>;\n  return (\n    <div className=\"block\">\n      <Container maxWidth=\"md\" className=\"my-6\">\n        <div className=\"stack border-2 border-primary\">\n          <Typography variant=\"h4\" className=\"bg-primary text-center p-6 text-white\">{test.title}</Typography>\n          <div className=\"stack p-3\">\n            <div className={styles.record}>\n              <Typography variant=\"h6\" color=\"primary\" className={styles['record-item-name']}>Subject:</Typography>\n              <Typography variant=\"h6\" className={styles['record-item-value']}>{test?.subject}</Typography>\n            </div>\n            <div className={styles.record}>\n              <Typography variant=\"h6\" color=\"primary\" className={styles['record-item-name']}>Total Questions:</Typography>\n              <Typography variant=\"h6\" className={styles['record-item-value']}>{test?.questions?.length}</Typography>\n            </div>\n            <div className={styles.record}>\n              <Typography variant=\"h6\" color=\"primary\" className={styles['record-item-name']}>Created By:</Typography>\n              <Typography variant=\"h6\" className={styles['record-item-value']}>{test.createdBy}</Typography>\n            </div>\n          </div>\n        </div>\n        <div className=\"w-full mx-auto\">\n          { // Question Component\n            test.questions && (index < test.questions.length) && test.questions.map((q, idx) => (\n              // Implementing this logic so that relevant component is mounted only\n              index === idx && (\n                <Question\n                  key={q._id}\n                  question={q}\n                  index={index}\n                  onSubmit={\n                    (ans) => {\n                      setAnswers([...answers, ans]);\n                      setIndex(index + 1);\n                    }\n                  }\n                  onSkip={\n                    (ans) => {\n                      setAnswers([...answers, ans]);\n                      setIndex(index + 1);\n                    }\n                  }\n                />\n              )\n            ))\n          }\n          {\n            test.questions && index >= test.questions.length && (\n              <TestResult\n                questions={test.questions}\n                answers={answers}\n                testId={test._id}\n              />\n            )\n          }\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default AttempTest;\n","/* eslint-disable no-underscore-dangle */\nimport React from 'react';\n\nimport { Routes, Route, Link, useLocation, useNavigate } from 'react-router-dom';\n\nimport queryString from 'query-string';\n\nimport {\n  Typography,\n  FormControl,\n  Select,\n  MenuItem,\n  Container,\n  InputLabel,\n  CircularProgress,\n  Button,\n  Card,\n} from '@mui/material';\n\nimport { useDispatch } from 'react-redux';\n\nimport { useQuery } from 'react-query';\nimport { getDemoTests } from '../../api/others';\n\nimport { addErrorToast } from '../../redux/actions/toasts';\n\nimport AttempTest from './AttempTest';\n\nimport styles from './DemoTests.module.css';\n\nfunction DemoTests() {\n  const subjects = ['English', 'Math', 'Physics', 'Chemistery', 'Biology'];\n  const { search } = useLocation();\n  const [filter, setFilter] = React.useState(queryString.parse(search));\n  const [demoTests, setDemoTests] = React.useState([]);\n  const dispatch = useDispatch();\n  const { isLoading, isFetching, isError, data, refetch } = useQuery(\n    ['demo-tests', filter],\n    (values) => getDemoTests(values),\n    {\n      onSuccess: (r) => setDemoTests(r.data.demoTests),\n      onError: (err) =>\n        dispatch(addErrorToast({ message: err.response?.data?.error || err.message })),\n    },\n  );\n  const navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(`?${queryString.stringify(filter)}`);\n    refetch(filter);\n  }, [filter, navigate, refetch]);\n  return (\n    <Routes>\n      <Route\n        index\n        element={\n          <div className=\"block\">\n            <Typography variant=\"h6\" color=\"primary\" align=\"center\">\n              Demo Tests\n            </Typography>\n            <Container maxWidth=\"md\">\n              <div className={styles.filter}>\n                <Typography variant=\"h6\">Filter</Typography>\n                <span className=\"flex-grow w-full md:w-auto\" />\n                <FormControl size=\"small\" sx={{ minWidth: '130px' }}>\n                  <InputLabel>Subject</InputLabel>\n                  <Select\n                    label=\"subject\"\n                    size=\"small\"\n                    value={filter.subject}\n                    onChange={(e) => setFilter({ ...filter, subject: e.target.value })}\n                  >\n                    {subjects.map((q) => (\n                      <MenuItem key={q} value={q}>\n                        {q}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n              {data && (\n                <div className={styles['cards-container']}>\n                  {demoTests.length === 0 && (\n                    <Typography variant=\"body1\" align=\"center\">\n                      No tests available yet\n                    </Typography>\n                  )}\n                  {demoTests.map((test) => (\n                    <Link to={`/demo-tests/${test._id}`}>\n                      <Card elevation={2} className=\"w-64 p-3 hover:bg-gray-100\">\n                        <Typography variant=\"h6\" color=\"primary\" align=\"center\">\n                          {test.title}\n                        </Typography>\n                        <Typography variant=\"body1\">{`Subject: ${test.subject}`}</Typography>\n                        <Typography variant=\"body1\">{`Total questions: ${test.questions.length}`}</Typography>\n                        <Typography variant=\"body1\">{`Created by: ${test.createdBy}`}</Typography>\n                      </Card>\n                    </Link>\n                  ))}\n                </div>\n              )}\n              {isLoading && (\n                <div className=\"page-pre-loader\">\n                  <CircularProgress />\n                </div>\n              )}\n              {isError && (!isFetching || !isLoading) && (\n                <div className=\"inline mx-auto\">\n                  <Typography variant=\"body1\" color=\"error\">\n                    An error occured\n                  </Typography>\n                  <Button onClick={() => refetch(filter)} variant=\"contained\">\n                    Reload\n                  </Button>\n                </div>\n              )}\n            </Container>\n          </div>\n        }\n      />\n      <Route path=\"/:_id\" element={<AttempTest />} />\n    </Routes>\n  );\n}\n\nexport default DemoTests;\n"],"names":["instance","axios","baseURL","process","getAnnouncements","isImportant","get","concat","getDemoTests","values","queryString","queryKey","getDemoTest","_id","_test$questions","useParams","_React$useState","React","_React$useState2","_slicedToArray","test","setTest","dispatch","useDispatch","navigate","useNavigate","isLoading","useQuery","onSuccess","_ref","data","demoTest","onError","err","_err$response","_err$response$data","addErrorToast","message","response","error","_React$useState3","_React$useState4","index","setIndex","_React$useState5","_React$useState6","answers","setAnswers","confirm","_jsx","className","children","CircularProgress","_jsxs","Container","maxWidth","Typography","variant","title","styles","color","subject","questions","length","createdBy","map","q","idx","Question","question","onSubmit","ans","_toConsumableArray","onSkip","TestResult","testId","search","useLocation","filter","setFilter","demoTests","setDemoTests","_useQuery","r","isFetching","isError","refetch","Routes","Route","element","align","FormControl","size","sx","minWidth","InputLabel","Select","label","value","onChange","e","_objectSpread","target","MenuItem","Link","to","Card","elevation","Button","onClick","path","AttempTest"],"sourceRoot":""}