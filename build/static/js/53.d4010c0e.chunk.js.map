{"version":3,"file":"static/js/53.d4010c0e.chunk.js","mappings":"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","sources":["api/others.js","webpack://hts-frontend/./src/components/demo-tests/DemoTests.module.css?b698","components/demo-tests/AttempTest.jsx","components/demo-tests/index.jsx"],"sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n});\n\n/**\n * \n * @param {Boolean} isImportant Fetch only important announcements if true\n */\nexport function getAnnouncements(isImportant) {\n  return instance.get(`/announcements${isImportant ? '?isImportant=true' : ''}`);\n}\n\nexport function getDemoTests(values) {\n  /* Due to refetch of react query we get\n    values = {\n      queryKey: ['demo-tests', { subject: <value> }]\n    }\n  */\n  return instance.get(`/demo-tests?${queryString.stringify(values.queryKey[1])}`);\n}\n\nexport function getDemoTest(_id) {\n  return instance.get(`/demo-tests/${_id}`);\n}\n\nexport default instance;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"DemoTests_filter__UYZpB\",\"cards-container\":\"DemoTests_cards-container__pryCJ\",\"record\":\"DemoTests_record__QCKIk\",\"record-item-name\":\"DemoTests_record-item-name__rltA3\",\"record-item-value\":\"DemoTests_record-item-value__VWuaJ\"};","/* eslint-disable no-restricted-globals */\n/* eslint-disable no-underscore-dangle */\nimport React from 'react';\n\nimport {\n  Typography,\n  CircularProgress,\n  Container,\n} from '@mui/material';\n\nimport {\n  useParams,\n  useNavigate,\n} from 'react-router-dom';\n\nimport { useDispatch } from 'react-redux';\n\nimport { useQuery } from 'react-query';\nimport { getDemoTest } from '../../api/others';\n\nimport { addErrorToast } from '../../redux/actions/toasts';\n\nimport Question from '../student/AttemptTest/Question';\nimport TestResult from '../student/AttemptTest/TestResult';\n\nimport styles from './DemoTests.module.css';\n\nfunction AttempTest() {\n  const { _id } = useParams();\n  const [test, setTest] = React.useState({});\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { isLoading } = useQuery(['demo-test', _id], () => getDemoTest(_id), {\n    onSuccess: ({ data }) => setTest(data.demoTest),\n    onError: (err) => {\n      dispatch(addErrorToast({ message: err.response?.data?.error || err.message }));\n      // Go back\n      navigate(-1);\n    },\n  });\n  const [index, setIndex] = React.useState(0);\n  const [answers, setAnswers] = React.useState([]);\n  React.useEffect(() => function () {\n    /* if (confirm('Are you sure you want to leave?')) {\n      // navigate('');\n    } else {\n      navigate('');\n    } */\n    return () => confirm('Are you sure you want to leave?') && navigate('');\n  }, []);\n  if (isLoading) return <div className=\"page-pre-loader\"><CircularProgress /></div>;\n  return (\n    <div className=\"block\">\n      <Container maxWidth=\"md\" className=\"my-6\">\n        <div className=\"stack border-2 border-primary\">\n          <Typography variant=\"h4\" className=\"bg-primary text-center p-6 text-white\">{test.title}</Typography>\n          <div className=\"stack p-3\">\n            <div className={styles.record}>\n              <Typography variant=\"h6\" color=\"primary\" className={styles['record-item-name']}>Subject:</Typography>\n              <Typography variant=\"h6\" className={styles['record-item-value']}>{test?.subject}</Typography>\n            </div>\n            <div className={styles.record}>\n              <Typography variant=\"h6\" color=\"primary\" className={styles['record-item-name']}>Total Questions:</Typography>\n              <Typography variant=\"h6\" className={styles['record-item-value']}>{test?.questions?.length}</Typography>\n            </div>\n            <div className={styles.record}>\n              <Typography variant=\"h6\" color=\"primary\" className={styles['record-item-name']}>Created By:</Typography>\n              <Typography variant=\"h6\" className={styles['record-item-value']}>{test.createdBy}</Typography>\n            </div>\n          </div>\n        </div>\n        <div className=\"w-full mx-auto\">\n          { // Question Component\n            test.questions && (index < test.questions.length) && test.questions.map((q, idx) => (\n              // Implementing this logic so that relevant component is mounted only\n              index === idx && (\n                <Question\n                  key={q._id}\n                  question={q}\n                  index={index}\n                  onSubmit={\n                    (ans) => {\n                      setAnswers([...answers, ans]);\n                      setIndex(index + 1);\n                    }\n                  }\n                  onSkip={\n                    (ans) => {\n                      setAnswers([...answers, ans]);\n                      setIndex(index + 1);\n                    }\n                  }\n                />\n              )\n            ))\n          }\n          {\n            test.questions && index >= test.questions.length && (\n              <TestResult\n                questions={test.questions}\n                answers={answers}\n                testId={test._id}\n              />\n            )\n          }\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default AttempTest;\n","/* eslint-disable no-underscore-dangle */\nimport React from 'react';\n\nimport { Routes, Route, Link, useLocation, useNavigate } from 'react-router-dom';\n\nimport queryString from 'query-string';\n\nimport {\n  Typography,\n  FormControl,\n  Select,\n  MenuItem,\n  Container,\n  InputLabel,\n  CircularProgress,\n  Button,\n  Card,\n} from '@mui/material';\n\nimport { useDispatch } from 'react-redux';\n\nimport { useQuery } from 'react-query';\nimport { getDemoTests } from '../../api/others';\n\nimport { addErrorToast } from '../../redux/actions/toasts';\n\nimport AttempTest from './AttempTest';\n\nimport styles from './DemoTests.module.css';\n\nfunction DemoTests() {\n  const subjects = ['English', 'Math', 'Physics', 'Chemistery', 'Biology'];\n  const { search } = useLocation();\n  const [filter, setFilter] = React.useState(queryString.parse(search));\n  const [demoTests, setDemoTests] = React.useState([]);\n  const dispatch = useDispatch();\n  const { isLoading, isFetching, isError, data, refetch } = useQuery(\n    ['demo-tests', filter],\n    (values) => getDemoTests(values),\n    {\n      onSuccess: (r) => setDemoTests(r.data.demoTests),\n      onError: (err) =>\n        dispatch(addErrorToast({ message: err.response?.data?.error || err.message })),\n    },\n  );\n  const navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(`?${queryString.stringify(filter)}`);\n    refetch(filter);\n  }, [filter, navigate, refetch]);\n  return (\n    <Routes>\n      <Route\n        index\n        element={\n          <div className=\"block\">\n            <Typography variant=\"h6\" color=\"primary\" align=\"center\">\n              Demo Tests\n            </Typography>\n            <Container maxWidth=\"md\">\n              <div className={styles.filter}>\n                <Typography variant=\"h6\">Filter</Typography>\n                <span className=\"flex-grow w-full md:w-auto\" />\n                <FormControl size=\"small\" sx={{ minWidth: '130px' }}>\n                  <InputLabel>Subject</InputLabel>\n                  <Select\n                    label=\"subject\"\n                    size=\"small\"\n                    value={filter.subject}\n                    onChange={(e) => setFilter({ ...filter, subject: e.target.value })}\n                  >\n                    {subjects.map((q) => (\n                      <MenuItem key={q} value={q}>\n                        {q}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n              {data && (\n                <div className={styles['cards-container']}>\n                  {demoTests.length === 0 && (\n                    <Typography variant=\"body1\" align=\"center\">\n                      No tests available yet\n                    </Typography>\n                  )}\n                  {demoTests.map((test) => (\n                    <Link to={`/demo-tests/${test._id}`}>\n                      <Card elevation={2} className=\"w-64 p-3 hover:bg-gray-100\">\n                        <Typography variant=\"h6\" color=\"primary\" align=\"center\">\n                          {test.title}\n                        </Typography>\n                        <Typography variant=\"body1\">{`Subject: ${test.subject}`}</Typography>\n                        <Typography variant=\"body1\">{`Total questions: ${test.questions.length}`}</Typography>\n                        <Typography variant=\"body1\">{`Created by: ${test.createdBy}`}</Typography>\n                      </Card>\n                    </Link>\n                  ))}\n                </div>\n              )}\n              {isLoading && (\n                <div className=\"page-pre-loader\">\n                  <CircularProgress />\n                </div>\n              )}\n              {isError && (!isFetching || !isLoading) && (\n                <div className=\"inline mx-auto\">\n                  <Typography variant=\"body1\" color=\"error\">\n                    An error occured\n                  </Typography>\n                  <Button onClick={() => refetch(filter)} variant=\"contained\">\n                    Reload\n                  </Button>\n                </div>\n              )}\n            </Container>\n          </div>\n        }\n      />\n      <Route path=\"/:_id\" element={<AttempTest />} />\n    </Routes>\n  );\n}\n\nexport default DemoTests;\n"],"names":["instance","axios","baseURL","process","getAnnouncements","isImportant","get","getDemoTests","values","queryString","queryKey","getDemoTest","_id","useParams","React","test","setTest","dispatch","useDispatch","navigate","useNavigate","isLoading","useQuery","onSuccess","data","demoTest","onError","err","addErrorToast","message","response","error","index","setIndex","answers","setAnswers","confirm","className","CircularProgress","Container","maxWidth","Typography","variant","title","styles","color","subject","questions","length","createdBy","map","q","idx","Question","question","onSubmit","ans","onSkip","TestResult","testId","search","useLocation","filter","setFilter","demoTests","setDemoTests","r","isFetching","isError","refetch","element","align","FormControl","size","sx","minWidth","InputLabel","Select","label","value","onChange","e","target","MenuItem","to","Card","elevation","Button","onClick","path"],"sourceRoot":""}